

//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
//            // Create the NotificationChannel.
//            val name = "TEST"
//            val descriptionText =" getString(R.string.channel_description)"
//            val importance = NotificationManager.IMPORTANCE_DEFAULT
//            val mChannel = NotificationChannel("CHANNEL_ID", name, importance)
//            mChannel.description = descriptionText
//            // Register the channel with the system. You can't change the importance
//            // or other notification behaviors after this.
//            val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
//            notificationManager.createNotificationChannel(mChannel)
//        }
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
//            // Create the NotificationChannel.
//            val name = "TEST2"
//            val descriptionText =" getString(R.string.channel_description)"
//            val importance = NotificationManager.IMPORTANCE_DEFAULT
//            val mChannel = NotificationChannel("CHANNEL_ID2", name, importance)
//            mChannel.description = descriptionText
//            // Register the channel with the system. You can't change the importance
//            // or other notification behaviors after this.
//            val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
//            notificationManager.createNotificationChannel(mChannel)
//            val ss = notificationManager.notificationChannels
//            println(ss)
//        }

        //        ActivityCompat.requestPermissions(
//            this, arrayOf(
//                android.Manifest.permission.POST_NOTIFICATIONS
//            ), 112
//        )

//        val intent = Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS).apply {
//            putExtra(Settings.EXTRA_APP_PACKAGE, packageName)
//            putExtra(Settings.EXTRA_CHANNEL_ID, "fcm_fallback_notification_channel")
//        }
//        startActivity(intent)


        // init notification

//        if (this.checkSelfPermission(android.Manifest.permission.POST_NOTIFICATIONS) == PackageManager.PERMISSION_DENIED) {
//            val intent = Intent(Settings.ACTION_APP_NOTIFICATION_SETTINGS).apply {
//                putExtra(Settings.EXTRA_APP_PACKAGE, packageName)
////            putExtra(Settings.EXTRA_CHANNEL_ID, "fcm_fallback_notification_channel")
//            }
//            startActivity(intent)
//        }






//        val intent = Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS).apply {
//            putExtra(Settings.EXTRA_APP_PACKAGE, packageName)
//            putExtra(Settings.EXTRA_CHANNEL_ID, "CHANNEL_ID2")
//        }
//        startActivity(intent)

/// TOKEEN

//        FirebaseMessaging.getInstance().token.addOnCompleteListener(OnCompleteListener { task ->
//            if (!task.isSuccessful) {
//               // Log.w(TAG, "Fetching FCM registration token failed", task.exception)
//                return@OnCompleteListener
//            }
//
//            // Get new FCM registration token
//            val token = task.result
//
//            // Log and toast
//            Log.d("SSSSSSSSSSSSSSSSSSSSSS", token)
//            println(token)
//           // Toast.makeText(baseContext, token, Toast.LENGTH_SHORT).show()
//        })
//        firebaseAnalytics = Firebase.analytics
//        val bundle = Bundle()
//        bundle.putString(FirebaseAnalytics.Param.ITEM_ID, "id")
//        bundle.putString(FirebaseAnalytics.Param.ITEM_NAME, "name")
//        bundle.putString(FirebaseAnalytics.Param.CONTENT_TYPE, "image")
//        firebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle)
        //FirebaseInAppMessaging.getInstance().setAutomaticDataCollectionEnabled(true);
//        DataUpdater(tapoDb,dataTapoDb,networkClient,this).getPDF()
//        DataUpdater(tapoDb,dataTapoDb,networkClient,this).getGraphics()

        //FirebaseInAppMessaging.getInstance().on










 //       AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)

       // firebaseAnalytics = Firebase.analytics
//        firebaseAnalytics.setUserProperty("favorite_food2", "food")
//        firebaseAnalytics.setUserProperty("favorite_food", "food")
       // FirebaseDatabase.getInstance().setPersistenceEnabled(false);



       // use default spinner item to show options in spinner

       // use default spinner item to show options in spinner
       //        val adapter: ArrayAdapter<String> = ArrayAdapter<String>(requireContext(), r2.layout.simple_spinner_item, courses)
       //        adapter.setDropDownViewResource(android.R.layout
       //            .simple_spinner_dropdown_item)
       //        binding.spinner.adapter = adapter
options.add("option 1")
        options.add("option 2")
        options.add("option 3")

        var courses = arrayOf<String?>("C", "Data structures",
            "Interview prep", "Algorithms",
            "DSA with java", "OS")

val options = ArrayList<String>()


<!--<?xml version="1.0" encoding="utf-8"?>-->
<!--<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"-->
<!--                                                   xmlns:app="http://schemas.android.com/apk/res-auto"-->
<!--                                                   xmlns:tools="http://schemas.android.com/tools"-->
<!--                                                   android:id="@+id/frameLayout"-->
<!--                                                   android:layout_width="match_parent"-->
<!--                                                   android:layout_height="wrap_content">-->

<!--    <androidx.constraintlayout.widget.ConstraintLayout-->
<!--            android:layout_width="match_parent"-->
<!--            android:layout_height="match_parent">-->

<!--        <LinearLayout-->
<!--                android:layout_width="match_parent"-->
<!--                android:layout_height="match_parent"-->
<!--                android:orientation="horizontal">-->

<!--            <TextView-->
<!--                    android:id="@+id/paywall_item_options_title"-->
<!--                    android:layout_width="wrap_content"-->
<!--                    android:layout_height="wrap_content"-->
<!--                    android:layout_marginStart="16dp"-->
<!--                    android:layout_marginBottom="8dp"-->
<!--                    android:textColor="#B6B6B6"-->
<!--                    android:textSize="20sp"-->
<!--                    tools:text="Description" />-->

<!--            <androidx.cardview.widget.CardView-->
<!--                    android:id="@+id/card_view"-->
<!--                    android:layout_width="match_parent"-->
<!--                    android:layout_height="wrap_content"-->
<!--                    android:layout_gravity="center"-->
<!--                    android:layout_marginStart="8dp"-->
<!--                    android:layout_marginTop="8dp"-->
<!--                    android:layout_marginEnd="8dp"-->
<!--                    android:layout_marginBottom="8dp"-->
<!--                    app:cardBackgroundColor="#292929"-->
<!--                    app:cardCornerRadius="4dp"-->
<!--                    app:layout_constraintBottom_toBottomOf="parent"-->
<!--                    app:layout_constraintEnd_toEndOf="parent"-->
<!--                    app:layout_constraintStart_toStartOf="parent"-->
<!--                    app:layout_constraintTop_toTopOf="parent">-->

<!--                <androidx.constraintlayout.widget.ConstraintLayout-->
<!--                        android:id="@+id/purchasableLayout"-->
<!--                        android:layout_width="match_parent"-->
<!--                        android:layout_height="wrap_content"-->
<!--                        android:layout_margin="16dp"-->
<!--                >-->

<!--                    <TextView-->
<!--                            android:id="@+id/paywall_item_best_offer"-->
<!--                            android:layout_width="wrap_content"-->
<!--                            android:layout_height="wrap_content"-->
<!--                            android:layout_marginBottom="8dp"-->
<!--                            android:textColor="#FFFFFF"-->
<!--                            android:textSize="18sp"-->
<!--                            android:textStyle="bold"-->
<!--                            app:layout_constraintBottom_toTopOf="@+id/paywall_item_price"-->
<!--                            app:layout_constraintStart_toStartOf="parent"-->
<!--                            app:layout_constraintTop_toTopOf="parent"-->
<!--                            android:text="Best Offer" />-->

<!--                    <TextView-->
<!--                            android:id="@+id/paywall_item_price"-->
<!--                            android:layout_width="wrap_content"-->
<!--                            android:layout_height="19dp"-->
<!--                            android:textAlignment="textEnd"-->
<!--                            android:textColor="#FFFFFF"-->
<!--                            android:textStyle="bold"-->
<!--                            app:layout_constraintBottom_toBottomOf="parent"-->
<!--                            app:layout_constraintStart_toStartOf="parent"-->
<!--                            tools:text="$4.99" />-->
<!--                </androidx.constraintlayout.widget.ConstraintLayout>-->

<!--            </androidx.cardview.widget.CardView>-->

<!--        </LinearLayout>-->

<!--    </androidx.constraintlayout.widget.ConstraintLayout>-->

<!--</androidx.constraintlayout.widget.ConstraintLayout>-->










        val dialogTest2 = SelectableSearchableDialog<CodePointsNew>()
        dialogTest2.title = "Wybierz czyn"
        dialogTest2.tileField1 = "Kod czynu: "
        dialogTest2.tileField2 = "Opis: "
        dialogTest2.tileField3 = "Punkty: "
        dialogTest2.isMultiSelect = true
        val listtotest2 = MutableLiveData<List<CodePointsNew>>()
        MainScope().launch(Dispatchers.IO) {
            val list = async { dataTapoDb.codePointsNew().getAll() }.await()
            withContext(Dispatchers.Main) {
                listtotest2.value = list
            }
        }
        listtotest2.observe(this, Observer {
            if (it.isNotEmpty()) {
                val listMap: List<SelectableSearchableDialogElement> = it.map {
                    SelectableSearchableDialogElement(
                        it.id,
                        it.description?: "",
                        it.points.toString()
                    )
                }
                dialogTest2.itemMapList = listMap
                dialogTest2.itemList = it
                dialogTest2.selectedItem.observe(this, Observer {

                        val selected = it
                        println(selected)

                })
//                val list = it.map { it.name }
//                dialogTest.itemList = list
                dialogTest2.show(supportFragmentManager, "testNNN")
            }

        })

        val dialogTest = SelectableSearchableDialog<CheckListDictionary>()
        dialogTest.title = "Wybierz czynność"
        dialogTest.tileField1 = ""
        dialogTest.isMultiSelect = false
        val listtotest = MutableLiveData<List<CheckListDictionary>>()
        MainScope().launch(Dispatchers.IO) {
            val list = async { tapoDb.checkListDictionary().getAll() }.await()
            withContext(Dispatchers.Main) {
                listtotest.value = list
            }
        }
        listtotest.observe(this, Observer {
            if (it.isNotEmpty()) {
                val listMap: List<SelectableSearchableDialogElement> = it.map {
                    SelectableSearchableDialogElement(
                        it.description

                    )
                }
                dialogTest.itemMapList = listMap
                dialogTest.itemList = it
                dialogTest.selectedItem.observe(this, Observer {

                    val selected = it
                    println(selected)

                })
//                val list = it.map { it.name }
//                dialogTest.itemList = list
                dialogTest.show(supportFragmentManager, "testNNN")
            }

        })








