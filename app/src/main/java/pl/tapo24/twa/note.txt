

//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
//            // Create the NotificationChannel.
//            val name = "TEST"
//            val descriptionText =" getString(R.string.channel_description)"
//            val importance = NotificationManager.IMPORTANCE_DEFAULT
//            val mChannel = NotificationChannel("CHANNEL_ID", name, importance)
//            mChannel.description = descriptionText
//            // Register the channel with the system. You can't change the importance
//            // or other notification behaviors after this.
//            val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
//            notificationManager.createNotificationChannel(mChannel)
//        }
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
//            // Create the NotificationChannel.
//            val name = "TEST2"
//            val descriptionText =" getString(R.string.channel_description)"
//            val importance = NotificationManager.IMPORTANCE_DEFAULT
//            val mChannel = NotificationChannel("CHANNEL_ID2", name, importance)
//            mChannel.description = descriptionText
//            // Register the channel with the system. You can't change the importance
//            // or other notification behaviors after this.
//            val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
//            notificationManager.createNotificationChannel(mChannel)
//            val ss = notificationManager.notificationChannels
//            println(ss)
//        }

        //        ActivityCompat.requestPermissions(
//            this, arrayOf(
//                android.Manifest.permission.POST_NOTIFICATIONS
//            ), 112
//        )

//        val intent = Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS).apply {
//            putExtra(Settings.EXTRA_APP_PACKAGE, packageName)
//            putExtra(Settings.EXTRA_CHANNEL_ID, "fcm_fallback_notification_channel")
//        }
//        startActivity(intent)


        // init notification

//        if (this.checkSelfPermission(android.Manifest.permission.POST_NOTIFICATIONS) == PackageManager.PERMISSION_DENIED) {
//            val intent = Intent(Settings.ACTION_APP_NOTIFICATION_SETTINGS).apply {
//                putExtra(Settings.EXTRA_APP_PACKAGE, packageName)
////            putExtra(Settings.EXTRA_CHANNEL_ID, "fcm_fallback_notification_channel")
//            }
//            startActivity(intent)
//        }






//        val intent = Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS).apply {
//            putExtra(Settings.EXTRA_APP_PACKAGE, packageName)
//            putExtra(Settings.EXTRA_CHANNEL_ID, "CHANNEL_ID2")
//        }
//        startActivity(intent)

/// TOKEEN

//        FirebaseMessaging.getInstance().token.addOnCompleteListener(OnCompleteListener { task ->
//            if (!task.isSuccessful) {
//               // Log.w(TAG, "Fetching FCM registration token failed", task.exception)
//                return@OnCompleteListener
//            }
//
//            // Get new FCM registration token
//            val token = task.result
//
//            // Log and toast
//            Log.d("SSSSSSSSSSSSSSSSSSSSSS", token)
//            println(token)
//           // Toast.makeText(baseContext, token, Toast.LENGTH_SHORT).show()
//        })
//        firebaseAnalytics = Firebase.analytics
//        val bundle = Bundle()
//        bundle.putString(FirebaseAnalytics.Param.ITEM_ID, "id")
//        bundle.putString(FirebaseAnalytics.Param.ITEM_NAME, "name")
//        bundle.putString(FirebaseAnalytics.Param.CONTENT_TYPE, "image")
//        firebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle)
        //FirebaseInAppMessaging.getInstance().setAutomaticDataCollectionEnabled(true);
//        DataUpdater(tapoDb,dataTapoDb,networkClient,this).getPDF()
//        DataUpdater(tapoDb,dataTapoDb,networkClient,this).getGraphics()

        //FirebaseInAppMessaging.getInstance().on










 //       AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)

       // firebaseAnalytics = Firebase.analytics
//        firebaseAnalytics.setUserProperty("favorite_food2", "food")
//        firebaseAnalytics.setUserProperty("favorite_food", "food")
       // FirebaseDatabase.getInstance().setPersistenceEnabled(false);



       // use default spinner item to show options in spinner

       // use default spinner item to show options in spinner
       //        val adapter: ArrayAdapter<String> = ArrayAdapter<String>(requireContext(), r2.layout.simple_spinner_item, courses)
       //        adapter.setDropDownViewResource(android.R.layout
       //            .simple_spinner_dropdown_item)
       //        binding.spinner.adapter = adapter
options.add("option 1")
        options.add("option 2")
        options.add("option 3")

        var courses = arrayOf<String?>("C", "Data structures",
            "Interview prep", "Algorithms",
            "DSA with java", "OS")

val options = ArrayList<String>()